// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: calendarpb/calendar.proto

package calendarpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ResponseStatusCode int32

const (
	ResponseStatusCode_Unknown ResponseStatusCode = 0
	ResponseStatusCode_Success ResponseStatusCode = 1
	ResponseStatusCode_Failed  ResponseStatusCode = 2
)

// Enum value maps for ResponseStatusCode.
var (
	ResponseStatusCode_name = map[int32]string{
		0: "Unknown",
		1: "Success",
		2: "Failed",
	}
	ResponseStatusCode_value = map[string]int32{
		"Unknown": 0,
		"Success": 1,
		"Failed":  2,
	}
)

func (x ResponseStatusCode) Enum() *ResponseStatusCode {
	p := new(ResponseStatusCode)
	*p = x
	return p
}

func (x ResponseStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_calendarpb_calendar_proto_enumTypes[0].Descriptor()
}

func (ResponseStatusCode) Type() protoreflect.EnumType {
	return &file_calendarpb_calendar_proto_enumTypes[0]
}

func (x ResponseStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseStatusCode.Descriptor instead.
func (ResponseStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_calendarpb_calendar_proto_rawDescGZIP(), []int{0}
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId  uint32 `protobuf:"varint,1,opt,name=scheduleId,proto3" json:"scheduleId,omitempty"`
	Date        *Date  `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	User        *User  `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	TagList     []*Tag `protobuf:"bytes,6,rep,name=tagList,proto3" json:"tagList,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarpb_calendar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_calendarpb_calendar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_calendarpb_calendar_proto_rawDescGZIP(), []int{0}
}

func (x *Schedule) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *Schedule) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Schedule) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Schedule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Schedule) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Schedule) GetTagList() []*Tag {
	if x != nil {
		return x.TagList
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId   uint32 `protobuf:"varint,1,opt,name=tagId,proto3" json:"tagId,omitempty"`
	TagName string `protobuf:"bytes,2,opt,name=tagName,proto3" json:"tagName,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarpb_calendar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_calendarpb_calendar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_calendarpb_calendar_proto_rawDescGZIP(), []int{1}
}

func (x *Tag) GetTagId() uint32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *Tag) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarpb_calendar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_calendarpb_calendar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_calendarpb_calendar_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *User) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarpb_calendar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_calendarpb_calendar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_calendarpb_calendar_proto_rawDescGZIP(), []int{3}
}

func (x *Date) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Date) GetEnd() *timestamp.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type ResponseSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedule   *Schedule          `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
	StatusCode ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=calendarpb.ResponseStatusCode" json:"statusCode,omitempty"`
}

func (x *ResponseSchedule) Reset() {
	*x = ResponseSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarpb_calendar_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseSchedule) ProtoMessage() {}

func (x *ResponseSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_calendarpb_calendar_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseSchedule.ProtoReflect.Descriptor instead.
func (*ResponseSchedule) Descriptor() ([]byte, []int) {
	return file_calendarpb_calendar_proto_rawDescGZIP(), []int{4}
}

func (x *ResponseSchedule) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ResponseSchedule) GetStatusCode() ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return ResponseStatusCode_Unknown
}

type ResponseTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag        *Tag               `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	StatusCode ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=calendarpb.ResponseStatusCode" json:"statusCode,omitempty"`
}

func (x *ResponseTag) Reset() {
	*x = ResponseTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarpb_calendar_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTag) ProtoMessage() {}

func (x *ResponseTag) ProtoReflect() protoreflect.Message {
	mi := &file_calendarpb_calendar_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTag.ProtoReflect.Descriptor instead.
func (*ResponseTag) Descriptor() ([]byte, []int) {
	return file_calendarpb_calendar_proto_rawDescGZIP(), []int{5}
}

func (x *ResponseTag) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *ResponseTag) GetStatusCode() ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return ResponseStatusCode_Unknown
}

type ScheduleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleList []*Schedule        `protobuf:"bytes,1,rep,name=scheduleList,proto3" json:"scheduleList,omitempty"`
	StatusCode   ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=calendarpb.ResponseStatusCode" json:"statusCode,omitempty"`
}

func (x *ScheduleList) Reset() {
	*x = ScheduleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarpb_calendar_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleList) ProtoMessage() {}

func (x *ScheduleList) ProtoReflect() protoreflect.Message {
	mi := &file_calendarpb_calendar_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleList.ProtoReflect.Descriptor instead.
func (*ScheduleList) Descriptor() ([]byte, []int) {
	return file_calendarpb_calendar_proto_rawDescGZIP(), []int{6}
}

func (x *ScheduleList) GetScheduleList() []*Schedule {
	if x != nil {
		return x.ScheduleList
	}
	return nil
}

func (x *ScheduleList) GetStatusCode() ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return ResponseStatusCode_Unknown
}

type TagList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagList    []*Tag             `protobuf:"bytes,1,rep,name=tagList,proto3" json:"tagList,omitempty"`
	StatusCode ResponseStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=calendarpb.ResponseStatusCode" json:"statusCode,omitempty"`
}

func (x *TagList) Reset() {
	*x = TagList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarpb_calendar_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagList) ProtoMessage() {}

func (x *TagList) ProtoReflect() protoreflect.Message {
	mi := &file_calendarpb_calendar_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagList.ProtoReflect.Descriptor instead.
func (*TagList) Descriptor() ([]byte, []int) {
	return file_calendarpb_calendar_proto_rawDescGZIP(), []int{7}
}

func (x *TagList) GetTagList() []*Tag {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *TagList) GetStatusCode() ResponseStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return ResponseStatusCode_Unknown
}

var File_calendarpb_calendar_proto protoreflect.FileDescriptor

var file_calendarpb_calendar_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2f, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x01, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x35, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x84, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x70, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x61, 0x67, 0x12, 0x21, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x74, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x74,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x07, 0x74,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2a, 0x3a, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x10, 0x02, 0x32, 0xe2, 0x05, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12,
	0x44, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x14, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x1c, 0x2e,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x44, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x2e, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70,
	0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x79, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0f, 0x2e, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x1a, 0x18, 0x2e, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x18,
	0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x35,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x0f, 0x2e, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x1a, 0x17, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x67, 0x12, 0x0f, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e,
	0x54, 0x61, 0x67, 0x1a, 0x17, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x13, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x2e,
	0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x5f, 0x5a, 0x5d, 0x62, 0x69, 0x74, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x61, 0x74, 0x6f, 0x6e, 0x61, 0x69,
	0x6f, 0x2f, 0x75, 0x69, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2d, 0x66, 0x6f, 0x72,
	0x2d, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x62, 0x61, 0x6b, 0x6f, 0x2d, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_calendarpb_calendar_proto_rawDescOnce sync.Once
	file_calendarpb_calendar_proto_rawDescData = file_calendarpb_calendar_proto_rawDesc
)

func file_calendarpb_calendar_proto_rawDescGZIP() []byte {
	file_calendarpb_calendar_proto_rawDescOnce.Do(func() {
		file_calendarpb_calendar_proto_rawDescData = protoimpl.X.CompressGZIP(file_calendarpb_calendar_proto_rawDescData)
	})
	return file_calendarpb_calendar_proto_rawDescData
}

var file_calendarpb_calendar_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_calendarpb_calendar_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_calendarpb_calendar_proto_goTypes = []interface{}{
	(ResponseStatusCode)(0),     // 0: calendarpb.ResponseStatusCode
	(*Schedule)(nil),            // 1: calendarpb.Schedule
	(*Tag)(nil),                 // 2: calendarpb.Tag
	(*User)(nil),                // 3: calendarpb.User
	(*Date)(nil),                // 4: calendarpb.Date
	(*ResponseSchedule)(nil),    // 5: calendarpb.ResponseSchedule
	(*ResponseTag)(nil),         // 6: calendarpb.ResponseTag
	(*ScheduleList)(nil),        // 7: calendarpb.ScheduleList
	(*TagList)(nil),             // 8: calendarpb.TagList
	(*timestamp.Timestamp)(nil), // 9: google.protobuf.Timestamp
	(*empty.Empty)(nil),         // 10: google.protobuf.Empty
}
var file_calendarpb_calendar_proto_depIdxs = []int32{
	4,  // 0: calendarpb.Schedule.date:type_name -> calendarpb.Date
	3,  // 1: calendarpb.Schedule.user:type_name -> calendarpb.User
	2,  // 2: calendarpb.Schedule.tagList:type_name -> calendarpb.Tag
	9,  // 3: calendarpb.Date.start:type_name -> google.protobuf.Timestamp
	9,  // 4: calendarpb.Date.end:type_name -> google.protobuf.Timestamp
	1,  // 5: calendarpb.ResponseSchedule.schedule:type_name -> calendarpb.Schedule
	0,  // 6: calendarpb.ResponseSchedule.statusCode:type_name -> calendarpb.ResponseStatusCode
	2,  // 7: calendarpb.ResponseTag.tag:type_name -> calendarpb.Tag
	0,  // 8: calendarpb.ResponseTag.statusCode:type_name -> calendarpb.ResponseStatusCode
	1,  // 9: calendarpb.ScheduleList.scheduleList:type_name -> calendarpb.Schedule
	0,  // 10: calendarpb.ScheduleList.statusCode:type_name -> calendarpb.ResponseStatusCode
	2,  // 11: calendarpb.TagList.tagList:type_name -> calendarpb.Tag
	0,  // 12: calendarpb.TagList.statusCode:type_name -> calendarpb.ResponseStatusCode
	1,  // 13: calendarpb.Calendar.CreateSchedule:input_type -> calendarpb.Schedule
	1,  // 14: calendarpb.Calendar.UpdateSchedule:input_type -> calendarpb.Schedule
	10, // 15: calendarpb.Calendar.GetScheduleList:input_type -> google.protobuf.Empty
	3,  // 16: calendarpb.Calendar.SearchScheduleByUserId:input_type -> calendarpb.User
	3,  // 17: calendarpb.Calendar.SearchScheduleByUserName:input_type -> calendarpb.User
	2,  // 18: calendarpb.Calendar.SearchScheduleByTagName:input_type -> calendarpb.Tag
	4,  // 19: calendarpb.Calendar.SearchScheduleByDate:input_type -> calendarpb.Date
	1,  // 20: calendarpb.Calendar.DeleteSchedule:input_type -> calendarpb.Schedule
	2,  // 21: calendarpb.Calendar.CreateTag:input_type -> calendarpb.Tag
	2,  // 22: calendarpb.Calendar.UpdateTag:input_type -> calendarpb.Tag
	10, // 23: calendarpb.Calendar.GetTagList:input_type -> google.protobuf.Empty
	5,  // 24: calendarpb.Calendar.CreateSchedule:output_type -> calendarpb.ResponseSchedule
	5,  // 25: calendarpb.Calendar.UpdateSchedule:output_type -> calendarpb.ResponseSchedule
	7,  // 26: calendarpb.Calendar.GetScheduleList:output_type -> calendarpb.ScheduleList
	7,  // 27: calendarpb.Calendar.SearchScheduleByUserId:output_type -> calendarpb.ScheduleList
	7,  // 28: calendarpb.Calendar.SearchScheduleByUserName:output_type -> calendarpb.ScheduleList
	7,  // 29: calendarpb.Calendar.SearchScheduleByTagName:output_type -> calendarpb.ScheduleList
	7,  // 30: calendarpb.Calendar.SearchScheduleByDate:output_type -> calendarpb.ScheduleList
	5,  // 31: calendarpb.Calendar.DeleteSchedule:output_type -> calendarpb.ResponseSchedule
	6,  // 32: calendarpb.Calendar.CreateTag:output_type -> calendarpb.ResponseTag
	6,  // 33: calendarpb.Calendar.UpdateTag:output_type -> calendarpb.ResponseTag
	8,  // 34: calendarpb.Calendar.GetTagList:output_type -> calendarpb.TagList
	24, // [24:35] is the sub-list for method output_type
	13, // [13:24] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_calendarpb_calendar_proto_init() }
func file_calendarpb_calendar_proto_init() {
	if File_calendarpb_calendar_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_calendarpb_calendar_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarpb_calendar_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarpb_calendar_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarpb_calendar_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarpb_calendar_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarpb_calendar_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarpb_calendar_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarpb_calendar_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_calendarpb_calendar_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_calendarpb_calendar_proto_goTypes,
		DependencyIndexes: file_calendarpb_calendar_proto_depIdxs,
		EnumInfos:         file_calendarpb_calendar_proto_enumTypes,
		MessageInfos:      file_calendarpb_calendar_proto_msgTypes,
	}.Build()
	File_calendarpb_calendar_proto = out.File
	file_calendarpb_calendar_proto_rawDesc = nil
	file_calendarpb_calendar_proto_goTypes = nil
	file_calendarpb_calendar_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CalendarClient is the client API for Calendar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalendarClient interface {
	CreateSchedule(ctx context.Context, in *Schedule, opts ...grpc.CallOption) (*ResponseSchedule, error)
	UpdateSchedule(ctx context.Context, in *Schedule, opts ...grpc.CallOption) (*ResponseSchedule, error)
	GetScheduleList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ScheduleList, error)
	SearchScheduleByUserId(ctx context.Context, in *User, opts ...grpc.CallOption) (*ScheduleList, error)
	SearchScheduleByUserName(ctx context.Context, in *User, opts ...grpc.CallOption) (*ScheduleList, error)
	SearchScheduleByTagName(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*ScheduleList, error)
	SearchScheduleByDate(ctx context.Context, in *Date, opts ...grpc.CallOption) (*ScheduleList, error)
	DeleteSchedule(ctx context.Context, in *Schedule, opts ...grpc.CallOption) (*ResponseSchedule, error)
	CreateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*ResponseTag, error)
	UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*ResponseTag, error)
	GetTagList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TagList, error)
}

type calendarClient struct {
	cc grpc.ClientConnInterface
}

func NewCalendarClient(cc grpc.ClientConnInterface) CalendarClient {
	return &calendarClient{cc}
}

func (c *calendarClient) CreateSchedule(ctx context.Context, in *Schedule, opts ...grpc.CallOption) (*ResponseSchedule, error) {
	out := new(ResponseSchedule)
	err := c.cc.Invoke(ctx, "/calendarpb.Calendar/CreateSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) UpdateSchedule(ctx context.Context, in *Schedule, opts ...grpc.CallOption) (*ResponseSchedule, error) {
	out := new(ResponseSchedule)
	err := c.cc.Invoke(ctx, "/calendarpb.Calendar/UpdateSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) GetScheduleList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ScheduleList, error) {
	out := new(ScheduleList)
	err := c.cc.Invoke(ctx, "/calendarpb.Calendar/GetScheduleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) SearchScheduleByUserId(ctx context.Context, in *User, opts ...grpc.CallOption) (*ScheduleList, error) {
	out := new(ScheduleList)
	err := c.cc.Invoke(ctx, "/calendarpb.Calendar/SearchScheduleByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) SearchScheduleByUserName(ctx context.Context, in *User, opts ...grpc.CallOption) (*ScheduleList, error) {
	out := new(ScheduleList)
	err := c.cc.Invoke(ctx, "/calendarpb.Calendar/SearchScheduleByUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) SearchScheduleByTagName(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*ScheduleList, error) {
	out := new(ScheduleList)
	err := c.cc.Invoke(ctx, "/calendarpb.Calendar/SearchScheduleByTagName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) SearchScheduleByDate(ctx context.Context, in *Date, opts ...grpc.CallOption) (*ScheduleList, error) {
	out := new(ScheduleList)
	err := c.cc.Invoke(ctx, "/calendarpb.Calendar/SearchScheduleByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) DeleteSchedule(ctx context.Context, in *Schedule, opts ...grpc.CallOption) (*ResponseSchedule, error) {
	out := new(ResponseSchedule)
	err := c.cc.Invoke(ctx, "/calendarpb.Calendar/DeleteSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) CreateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*ResponseTag, error) {
	out := new(ResponseTag)
	err := c.cc.Invoke(ctx, "/calendarpb.Calendar/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*ResponseTag, error) {
	out := new(ResponseTag)
	err := c.cc.Invoke(ctx, "/calendarpb.Calendar/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) GetTagList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TagList, error) {
	out := new(TagList)
	err := c.cc.Invoke(ctx, "/calendarpb.Calendar/GetTagList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarServer is the server API for Calendar service.
type CalendarServer interface {
	CreateSchedule(context.Context, *Schedule) (*ResponseSchedule, error)
	UpdateSchedule(context.Context, *Schedule) (*ResponseSchedule, error)
	GetScheduleList(context.Context, *empty.Empty) (*ScheduleList, error)
	SearchScheduleByUserId(context.Context, *User) (*ScheduleList, error)
	SearchScheduleByUserName(context.Context, *User) (*ScheduleList, error)
	SearchScheduleByTagName(context.Context, *Tag) (*ScheduleList, error)
	SearchScheduleByDate(context.Context, *Date) (*ScheduleList, error)
	DeleteSchedule(context.Context, *Schedule) (*ResponseSchedule, error)
	CreateTag(context.Context, *Tag) (*ResponseTag, error)
	UpdateTag(context.Context, *Tag) (*ResponseTag, error)
	GetTagList(context.Context, *empty.Empty) (*TagList, error)
}

// UnimplementedCalendarServer can be embedded to have forward compatible implementations.
type UnimplementedCalendarServer struct {
}

func (*UnimplementedCalendarServer) CreateSchedule(context.Context, *Schedule) (*ResponseSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedule not implemented")
}
func (*UnimplementedCalendarServer) UpdateSchedule(context.Context, *Schedule) (*ResponseSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchedule not implemented")
}
func (*UnimplementedCalendarServer) GetScheduleList(context.Context, *empty.Empty) (*ScheduleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduleList not implemented")
}
func (*UnimplementedCalendarServer) SearchScheduleByUserId(context.Context, *User) (*ScheduleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchScheduleByUserId not implemented")
}
func (*UnimplementedCalendarServer) SearchScheduleByUserName(context.Context, *User) (*ScheduleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchScheduleByUserName not implemented")
}
func (*UnimplementedCalendarServer) SearchScheduleByTagName(context.Context, *Tag) (*ScheduleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchScheduleByTagName not implemented")
}
func (*UnimplementedCalendarServer) SearchScheduleByDate(context.Context, *Date) (*ScheduleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchScheduleByDate not implemented")
}
func (*UnimplementedCalendarServer) DeleteSchedule(context.Context, *Schedule) (*ResponseSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchedule not implemented")
}
func (*UnimplementedCalendarServer) CreateTag(context.Context, *Tag) (*ResponseTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (*UnimplementedCalendarServer) UpdateTag(context.Context, *Tag) (*ResponseTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (*UnimplementedCalendarServer) GetTagList(context.Context, *empty.Empty) (*TagList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagList not implemented")
}

func RegisterCalendarServer(s *grpc.Server, srv CalendarServer) {
	s.RegisterService(&_Calendar_serviceDesc, srv)
}

func _Calendar_CreateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Schedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).CreateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendarpb.Calendar/CreateSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).CreateSchedule(ctx, req.(*Schedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_UpdateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Schedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).UpdateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendarpb.Calendar/UpdateSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).UpdateSchedule(ctx, req.(*Schedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_GetScheduleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).GetScheduleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendarpb.Calendar/GetScheduleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).GetScheduleList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_SearchScheduleByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).SearchScheduleByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendarpb.Calendar/SearchScheduleByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).SearchScheduleByUserId(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_SearchScheduleByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).SearchScheduleByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendarpb.Calendar/SearchScheduleByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).SearchScheduleByUserName(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_SearchScheduleByTagName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).SearchScheduleByTagName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendarpb.Calendar/SearchScheduleByTagName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).SearchScheduleByTagName(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_SearchScheduleByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Date)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).SearchScheduleByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendarpb.Calendar/SearchScheduleByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).SearchScheduleByDate(ctx, req.(*Date))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_DeleteSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Schedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).DeleteSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendarpb.Calendar/DeleteSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).DeleteSchedule(ctx, req.(*Schedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendarpb.Calendar/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).CreateTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendarpb.Calendar/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).UpdateTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_GetTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).GetTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendarpb.Calendar/GetTagList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).GetTagList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calendar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calendarpb.Calendar",
	HandlerType: (*CalendarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchedule",
			Handler:    _Calendar_CreateSchedule_Handler,
		},
		{
			MethodName: "UpdateSchedule",
			Handler:    _Calendar_UpdateSchedule_Handler,
		},
		{
			MethodName: "GetScheduleList",
			Handler:    _Calendar_GetScheduleList_Handler,
		},
		{
			MethodName: "SearchScheduleByUserId",
			Handler:    _Calendar_SearchScheduleByUserId_Handler,
		},
		{
			MethodName: "SearchScheduleByUserName",
			Handler:    _Calendar_SearchScheduleByUserName_Handler,
		},
		{
			MethodName: "SearchScheduleByTagName",
			Handler:    _Calendar_SearchScheduleByTagName_Handler,
		},
		{
			MethodName: "SearchScheduleByDate",
			Handler:    _Calendar_SearchScheduleByDate_Handler,
		},
		{
			MethodName: "DeleteSchedule",
			Handler:    _Calendar_DeleteSchedule_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _Calendar_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _Calendar_UpdateTag_Handler,
		},
		{
			MethodName: "GetTagList",
			Handler:    _Calendar_GetTagList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendarpb/calendar.proto",
}
